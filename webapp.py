import os\nimport datetime as dt\nfrom urllib.parse import urlparse\nfrom flask import Flask, render_template, request, redirect, url_for, flash, jsonify, abort\nfrom flask_login import login_user, logout_user, current_user, login_required\nfrom sqlalchemy import or_, and_\n
from sqlalchemy import text, inspect

def _bootstrap_migrations(app):
    """Create any new columns/tables if they don't exist (Postgres/SQLite safe)."""
    from extensions import db
    eng = db.engine
    insp = inspect(eng)

    # --- Tables ---
    # Ensure RSVP exists (legacy should already be there)
    # Ensure AvailabilityWindow & ChecklistItem exist
    with eng.begin() as conn:
        conn.execute(text("""
        CREATE TABLE IF NOT EXISTS availability_window (
            id SERIAL PRIMARY KEY,
            user_id INTEGER NOT NULL REFERENCES "user"(id),
            date DATE NOT NULL,
            start_time TIME NOT NULL,
            end_time TIME NOT NULL,
            is_unavailable BOOLEAN NOT NULL DEFAULT TRUE
        )
        """))
        conn.execute(text("""
        CREATE TABLE IF NOT EXISTS checklist_item (
            id SERIAL PRIMARY KEY,
            event_id INTEGER NOT NULL REFERENCES event(id),
            label TEXT NOT NULL,
            is_checked BOOLEAN NOT NULL DEFAULT FALSE,
            added_by_user_id INTEGER NULL REFERENCES "user"(id)
        )
        """))

    # --- Columns on event ---
    cols = {c['name'] for c in insp.get_columns('event')}
    ddl = []
    if 'doors_open_time' not in cols:
        ddl.append("ALTER TABLE event ADD COLUMN IF NOT EXISTS doors_open_time TIME")
    if 'leave_by_time' not in cols:
        ddl.append("ALTER TABLE event ADD COLUMN IF NOT EXISTS leave_by_time TIME")
    if 'no_specified_end_time' not in cols:
        ddl.append("ALTER TABLE event ADD COLUMN IF NOT EXISTS no_specified_end_time BOOLEAN NOT NULL DEFAULT FALSE")
    if 'dry' not in cols:
        ddl.append("ALTER TABLE event ADD COLUMN IF NOT EXISTS dry BOOLEAN NOT NULL DEFAULT FALSE")
    if 'capacity' not in cols:
        ddl.append("ALTER TABLE event ADD COLUMN IF NOT EXISTS capacity INTEGER NOT NULL DEFAULT 0")
    if ddl:
        with eng.begin() as conn:
            for stmt in ddl:
                conn.execute(text(stmt))

    # --- Unique constraint for RSVP (event_id, user_id) ---
    # Best-effort: Postgres name check
    try:
        if insp.dialect.name == 'postgresql':
            res = eng.execute(text("""
                SELECT 1 FROM pg_constraint
                WHERE conname = 'uq_event_user'
            """)).scalar()
            if not res:
                eng.execute(text("""
                    DO $$ BEGIN
                    IF NOT EXISTS (
                        SELECT 1 FROM pg_constraint WHERE conname = 'uq_event_user'
                    ) THEN
                        ALTER TABLE rsvp ADD CONSTRAINT uq_event_user UNIQUE (event_id, user_id);
                    END IF;
                    END $$;
                """))
    except Exception:
        pass  # ignore on SQLite or if already present
\nfrom extensions import db, login_manager\nfrom models import User, Event, RSVP, AvailabilityWindow, ChecklistItem, default_bring_items\n\ndef normalize_db_url(raw_url: str) -> str:\n    if raw_url.startswith("postgres://"):\n        raw_url = raw_url.replace("postgres://","postgresql://",1)\n    # Railway often provides SSL by default; SQLAlchemy handles with query args if present\n    return raw_url\n\ndef create_app():\n    app = Flask(__name__, template_folder='templates', static_folder='static')\n    app.secret_key = os.environ.get("SECRET_KEY","dev-secret")\n    db_url = os.environ.get("DATABASE_URL")\n    if db_url:\n        app.config["SQLALCHEMY_DATABASE_URI"] = normalize_db_url(db_url)\n    else:\n        app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///planpals.db"\n    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False\n\n    db.init_app(app)\n    login_manager.init_app(app)\n\n    with app.app_context():\n        db.create_all()\n    _bootstrap_migrations(app)\n    return app\n\napp = create_app()\nprint("PlanPals: Flask app created")\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n@app.context_processor\ndef inject_now():\n    return {"now": dt.datetime.utcnow()}\n\n@app.route("/")\ndef index():\n    events = Event.query.order_by(Event.date.asc(), Event.doors_open_time.asc().nullsfirst()).all()\n    # RSVP summary\n    summary = {}\n    for ev in events:\n        s = {"going":[], "maybe":[], "no":[], "busy":[]}\n        # compute busy from availability windows\n        ev_start, ev_end = ev.time_window()\n        users = User.query.all()\n        for u in users:\n            # Check unavailability overlap\n            busy = False\n            awins = AvailabilityWindow.query.filter_by(user_id=u.id, date=ev.date).all()\n            if ev_end is None:\n                # any window on date means busy sometime; still show 'busy' (red) but can still RSVP\n                busy = any(w.is_unavailable for w in awins)\n            else:\n                for w in awins:\n                    if w.is_unavailable:\n                        w_start = dt.datetime.combine(w.date, w.start_time)\n                        w_end = dt.datetime.combine(w.date, w.end_time)\n                        # overlap\n                        if not (w_end <= ev_start or w_start >= ev_end):\n                            busy = True; break\n            if busy:\n                s["busy"].append(u.name)\n        # pull RSVPs\n        for r in ev.rsvps:\n            s[r.status].append(r.user.name)\n        summary[ev.id] = s\n    return render_template("index.html", events=events, summary=summary)\n\n@app.route("/register", methods=["GET","POST"])\ndef register():\n    if request.method == "POST":\n        name = request.form["name"].strip()\n        email = request.form["email"].lower().strip()\n        password = request.form["password"]\n        if not name or not email or not password:\n            flash("All fields are required.","error")\n            return redirect(url_for("register"))\n        if User.query.filter_by(email=email).first():\n            flash("Email already registered.","error")\n            return redirect(url_for("register"))\n        u = User(name=name, email=email)\n        u.set_password(password)\n        db.session.add(u)\n        db.session.commit()\n        login_user(u)\n        return redirect(url_for("index"))\n    return render_template("register.html")\n\n@app.route("/login", methods=["GET","POST"])\ndef login():\n    if request.method == "POST":\n        email = request.form["email"].lower().strip()\n        password = request.form["password"]\n        u = User.query.filter_by(email=email).first()\n        if u and u.check_password(password):\n            login_user(u)\n            return redirect(url_for("index"))\n        flash("Invalid credentials.","error")\n    return render_template("login.html")\n\n@app.route("/logout")\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for("index"))\n\n@app.route("/create", methods=["GET","POST"])\n@login_required\ndef create():\n    if request.method == "POST":\n        title = request.form["title"].strip()\n        date_str = request.form["date"]\n        description = request.form.get("description","").strip()\n        capacity = int(request.form.get("capacity","0") or 0)\n        dry = bool(request.form.get("dry"))\n        doors_open = request.form.get("doors_open_time") or None\n        leave_by = request.form.get("leave_by_time") or None\n        no_end = bool(request.form.get("no_end"))\n        if not title or not date_str:\n            flash("Title and date are required.","error")\n            return redirect(url_for("create"))\n        ev = Event(\n            title=title,\n            date=dt.datetime.strptime(date_str,"%Y-%m-%d").date(),\n            description=description,\n            capacity=capacity,\n            dry=dry,\n            doors_open_time=dt.datetime.strptime(doors_open,"%H:%M").time() if doors_open else None,\n            leave_by_time=None if no_end else (dt.datetime.strptime(leave_by,"%H:%M").time() if leave_by else None),\n            no_specified_end_time=no_end,\n            creator_id=current_user.id\n        )\n        db.session.add(ev)\n        db.session.flush()  # get id\n\n        # Bring list checkboxes + other items\n        selected = request.form.getlist("bring[]")\n        other_text = request.form.get("bring_other","").strip()\n        if other_text:\n            selected.extend([x.strip() for x in other_text.split(",") if x.strip()])\n\n        # If dry, filter alcohol/weed-ish labels out\n        blocked = {"Alcohol","Weed","Beer","Wine","Liquor"}\n        for label in selected:\n            if ev.dry and label.strip() in blocked:\n                continue\n            db.session.add(ChecklistItem(event_id=ev.id, label=label.strip()))\n        db.session.commit()\n        flash("Event created!", "success")\n        return redirect(url_for("event_detail", event_id=ev.id))\n    # Render create with default list\n    defaults = default_bring_items + ["Alcohol","Weed"]\n    return render_template("create.html", defaults=defaults)\n\n@app.route("/event/<int:event_id>")\ndef event_detail(event_id:int):\n    ev = Event.query.get_or_404(event_id)\n    # Determine potential attendees/busy for the date\n    users = User.query.all()\n    potential, busy = [], []\n    ev_start, ev_end = ev.time_window()\n    for u in users:\n        awins = AvailabilityWindow.query.filter_by(user_id=u.id, date=ev.date).all()\n        is_busy = any(w.is_unavailable for w in awins) if ev_end is None else False\n        if ev_end is not None:\n            for w in awins:\n                if w.is_unavailable:\n                    w_start = dt.datetime.combine(w.date, w.start_time)\n                    w_end = dt.datetime.combine(w.date, w.end_time)\n                    if not (w_end <= ev_start or w_start >= ev_end):\n                        is_busy = True; break\n        (busy if is_busy else potential).append(u)\n    # RSVP status for current user\n    my_rsvp = None\n    if current_user.is_authenticated:\n        my_rsvp = RSVP.query.filter_by(event_id=ev.id, user_id=current_user.id).first()\n    return render_template("event.html", ev=ev, potential=potential, busy=busy, my_rsvp=my_rsvp)\n\n@app.route("/rsvp/<int:event_id>/<status>", methods=["POST"])\n@login_required\ndef rsvp(event_id:int, status:str):\n    if status not in ("going","maybe","no"):\n        abort(400)\n    ev = Event.query.get_or_404(event_id)\n    r = RSVP.query.filter_by(event_id=event_id, user_id=current_user.id).first()\n    if not r:\n        r = RSVP(event_id=event_id, user_id=current_user.id, status=status)\n        db.session.add(r)\n    else:\n        r.status = status\n    db.session.commit()\n    return redirect(url_for("event_detail", event_id=event_id))\n\n@app.route("/toggle_item/<int:item_id>", methods=["POST"])\n@login_required\ndef toggle_item(item_id:int):\n    item = ChecklistItem.query.get_or_404(item_id)\n    # only creator can toggle\n    if item.event.creator_id != current_user.id:\n        abort(403)\n    item.is_checked = not item.is_checked\n    db.session.commit()\n    return jsonify({"ok": True, "is_checked": item.is_checked})\n\n@app.route("/schedule", methods=["GET","POST"])\n@login_required\ndef schedule():\n    if request.method == "POST":\n        date_str = request.form["date"]\n        start = request.form["start"]\n        end = request.form["end"]\n        if not date_str or not start or not end:\n            flash("Please provide date, start, and end times.","error")\n            return redirect(url_for("schedule"))\n        aw = AvailabilityWindow(\n            user_id=current_user.id,\n            date=dt.datetime.strptime(date_str,"%Y-%m-%d").date(),\n            start_time=dt.datetime.strptime(start,"%H:%M").time(),\n            end_time=dt.datetime.strptime(end,"%H:%M").time(),\n            is_unavailable=True\n        )\n        db.session.add(aw)\n        db.session.commit()\n        flash("Unavailability added.","success")\n        return redirect(url_for("schedule"))\n    wins = AvailabilityWindow.query.filter_by(user_id=current_user.id).order_by(AvailabilityWindow.date.asc(), AvailabilityWindow.start_time.asc()).all()\n    return render_template("schedule.html", wins=wins)\n\n@app.route("/delete_window/<int:win_id>", methods=["POST"])\n@login_required\ndef delete_window(win_id:int):\n    w = AvailabilityWindow.query.get_or_404(win_id)\n    if w.user_id != current_user.id:\n        abort(403)\n    db.session.delete(w)\n    db.session.commit()\n    return redirect(url_for("schedule"))\n\n@app.route("/profile")\n@login_required\ndef profile():\n    my_events = Event.query.filter_by(creator_id=current_user.id).order_by(Event.date.desc()).all()\n    my_rsvps = RSVP.query.filter_by(user_id=current_user.id).all()\n    return render_template("profile.html", my_events=my_events, my_rsvps=my_rsvps)\n\n@app.route("/event/<int:event_id>/edit", methods=["GET","POST"])\n@login_required\ndef edit_event(event_id:int):\n    ev = Event.query.get_or_404(event_id)\n    if ev.creator_id != current_user.id:\n        abort(403)\n    if request.method == "POST":\n        ev.title = request.form["title"].strip()\n        ev.date = dt.datetime.strptime(request.form["date"],"%Y-%m-%d").date()\n        ev.description = request.form.get("description","").strip()\n        ev.capacity = int(request.form.get("capacity","0") or 0)\n        ev.dry = bool(request.form.get("dry"))\n        doors_open = request.form.get("doors_open_time") or None\n        leave_by = request.form.get("leave_by_time") or None\n        no_end = bool(request.form.get("no_end"))\n        ev.doors_open_time = dt.datetime.strptime(doors_open,"%H:%M").time() if doors_open else None\n        ev.leave_by_time = None if no_end else (dt.datetime.strptime(leave_by,"%H:%M").time() if leave_by else None)\n        ev.no_specified_end_time = no_end\n        # replace checklist if provided\n        if "bring[]" in request.form or "bring_other" in request.form:\n            ChecklistItem.query.filter_by(event_id=ev.id).delete()\n            selected = request.form.getlist("bring[]")\n            other_text = request.form.get("bring_other","").strip()\n            if other_text:\n                selected.extend([x.strip() for x in other_text.split(",") if x.strip()])\n            blocked = {"Alcohol","Weed","Beer","Wine","Liquor"}\n            for label in selected:\n                if ev.dry and label.strip() in blocked:\n                    continue\n                db.session.add(ChecklistItem(event_id=ev.id, label=label.strip()))\n        db.session.commit()\n        flash("Event updated.","success")\n        return redirect(url_for("event_detail", event_id=ev.id))\n    defaults = default_bring_items + ["Alcohol","Weed"]\n    existing = [c.label for c in ev.checklist_items]\n    return render_template("edit_event.html", ev=ev, defaults=defaults, existing=existing)\n\n@app.route("/event/<int:event_id>/delete", methods=["POST"])\n@login_required\ndef delete_event(event_id:int):\n    ev = Event.query.get_or_404(event_id)\n    if ev.creator_id != current_user.id:\n        abort(403)\n    db.session.delete(ev)\n    db.session.commit()\n    flash("Event deleted.","success")\n    return redirect(url_for("profile"))\n\n\n@app.route('/health')\ndef health():\n    return "ok", 200